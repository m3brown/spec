<?xml version="1.0" encoding="us-ascii"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="2"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" docName="draft-ietf-oauth-token-exchange-03"
     ipr="trust200902">
  <front>
    <title abbrev="Token Exchange">OAuth 2.0 Token Exchange: an STS for the REST of us</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author fullname="Anthony Nadalin" initials="A." surname="Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>
    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization>Ping Identity</organization>
      <address><email>brian.d.campbell@gmail.com</email></address>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
      <address><email>ve7jtb@ve7jtb.com</email></address>
    </author>
    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization abbrev="Salesforce">Salesforce</organization>
      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>

    <date />

    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>Delegation</keyword>
    <keyword>on-behalf-of</keyword>
    <keyword>act-as</keyword>
    
    <abstract>
      <t>
  This specification facilitates a lightweight HTTP and JSON based
  security token service by defining how to request and obtain
  security tokens from OAuth authorization servers,
  including enabling one party to act on behalf of another or
  enabling one party to delegate authority to another.
      </t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction">
<t>
  A security token is a set of information that facilitates
  the sharing of identity and security information across security domains.
  Examples of security tokens include
  JSON Web Tokens (JWTs) <xref target="RFC7519"/> and
  SAML Assertions <xref target="OASIS.saml-core-2.0-os"/>.
  Security tokens are typically signed to achieve integrity
  and sometimes also encrypted to achieve confidentiality.
  Security tokens are also described as Assertions in
  <xref target="RFC7521"/>.
</t>

<t>
  A security token service (STS) is a service capable of validating and issuing
  security tokens, which enables web service clients to obtain appropriate temporary
  access credentials for resources in heterogeneous environments or across security
  domains. Clients have historically used <xref target="WS-Trust">WS-Trust</xref>
  as the protocol to interact with an STS for token exchange.
  However WS-Trust is a fairly heavyweight framework which uses XML, SOAP,
  WS-Security, XML-Signatures, etc. while the trend in more modern web development
  has been towards more lightweight services utilizing RESTful patterns and JSON.
  <xref target="RFC6749">The OAuth 2.0 Authorization Framework</xref>
  and <xref target="RFC6750">OAuth 2.0 Bearer Tokens</xref>
  have emerged as popular standards for authorizing and securing access to HTTP and
  RESTful resources but do not provide everything necessary to support generic
  STS interactions.
</t>
<t>
  This specification defines a lightweight protocol extending OAuth 2.0 that enables
  clients to request and obtain security tokens from authorization servers acting in
  the role of an STS. There is support for enabling one party to act on behalf of
  another as well as enabling one party to delegate constrained authority to another.
  Similar to OAuth 2.0, this specification focuses on client developer simplicity and
  requires only an HTTP client and JSON parser, which are nearly universally available
  in modern development environments. The STS protocol defined in this specification
  is not itself RESTful (an STS doesn't lend itself particularly well to a REST
  approach) but does utilize communication patterns and data formats that should be
  more palatable to developers accustom to working with RESTful systems.
</t>
<t>
  A new security token request grant type and the associated specific parameters for
  a security token request to the token endpoint are defined by this specification.
  A security token response is a normal OAuth 2.0 response from the token endpoint
  with a few additional parameters defined herein to provide information to the client.
</t>
<t>
	The security tokens obtained could be used in a number of contexts,
	the specifics of which are beyond the scope of this document.
  <!-- TODO some examples? -->
</t>
<t>
  The scope of this specification is limited to the definition of a framework and
  basic request and response protocol for an STS style token exchange utilizing OAuth 2.0.
  The syntax, semantics and security characteristics of the tokens themselves
  (both those presented to the AS and those obtained by the client)
  are explicitly out of scope and no requirements are placed on the trust model in
  which an implementation might be deployed. Additional profiles may provide
  more detailed requirements around the specific nature of the parties and trust involved,
  whether signatures and/or encryption of tokens is required, etc., however, such details
  will often be policy decisions made with respect to the specific needs of individual
  deployments and will be configured or implemented accordingly.
</t>


      <section title="Requirements Notation and Conventions">
	<t>
	  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	  document are to be interpreted as described in
	  <xref target="RFC2119">RFC 2119</xref>.
	</t>
      </section>

      <section title="Terminology">
        <t>
	  This specification uses the terms "authorization server"
	  "token endpoint", "token request", and "token response"
	  defined by <xref target="RFC6749">OAuth 2.0</xref>,
	  and the term "Claim" is defined by
	  <xref target="RFC7519">JSON Web Token (JWT)</xref>.
        </t>
      </section>

      <section title="Delegation vs. Impersonation Semantics">
  <t>
    When principal A impersonates principal B, A is given all
    the rights that B has within some defined rights context
    and is indistinguishable from B in that context.
    Whereas, with delegation semantics, principal A still has its own identity
    separate from B and it is explicitly understood that while B
    may have delegated its rights to A, any actions taken are
    being taken by A and not B. In a sense, A is an agent for B.
  </t>
  <t>
    Delegation semantics are therefore different than
    impersonation semantics, with which it is sometimes
    confused. When principal A impersonates principal B, then in
    so far as any entity receiving such a token is concerned, they are
    actually dealing with B. It is true that some members of the
    identity system might have awareness that impersonation is
    going on but it is not a requirement. For all intents and
    purposes, when A is impersonating B, A is B.
  </t>
  <t>
    A security token with delegation semantics is requested using this
    framework by including both an on_behalf_of token and an act_as token in
    the request. The on_behalf_of token represents the identity of the party on
    behalf of whom the token is being requested while the act_as token represents
    the identity of the party to whom the access rights of the returned token are
    being delegated.  In this case, the token returned to the client will contain
    information about both parties.
  </t>
  <t>
    A security token with impersonation semantics is requested using this framework
    by including an on_behalf_of token in the request and omitting the act_as token.
    The on_behalf_of token represents the identity of the party on behalf of whom
    the token is being requested the token returned to the client will contain
    information about that party.
  </t>
      </section>

    </section>
    <section title="Security Token Request and Response">
    <section title="Request" anchor="Request">
<t>
  A client requests a security token by making a token request to the authorization
  server's token endpoint using the extension grant type mechanism defined
  in <xref target="RFC6749">OAuth 2.0, Section 4.5</xref>.
</t>
<t>
  Client authentication to the authorization server is done using the normal
  mechanisms provided by OAuth 2.0.
  <xref target="RFC6749">The OAuth 2.0 Authorization Framework, Section 2.3.1</xref>
  defines password-based authentication of the client,
  however, client authentication is extensible and other mechanisms are allowed.
  For example, <xref target="RFC7523"/> defines client authentication using
  JSON Web Tokens (JWTs) <xref target="RFC7519"/>.
  Other mechanisms, such as TLS client authentication, are also possible.
  The supported methods of client authentication and whether or not to allow
  unauthenticated or unidentified clients are deployment decisions that are
  at the discretion of the authorization server.
</t>
<t>
  The client makes a general security token request to the token endpoint with an extension
  grant type by including the
  following parameters using the <spanx style='verb'>application/x-www-form-urlencoded</spanx>
  format with a character encoding of UTF-8 in the HTTP request entity-body:
</t>
<t>
<list style="hanging">

  <t hangText="grant_type">
    <vspace/>
    REQUIRED. The value
    <spanx style='verb'>urn:ietf:params:oauth:grant-type:security-token-request</spanx>
    indicates that it is a security token request.
  </t>

  <t hangText="resource">
    <vspace/>
    OPTIONAL.
    Indicates the location of the service or resource where the client intends to use
    the requested security token. The value MUST be an absolute URI as defined by
    Section 4.3 of <xref target="RFC3986"/>. The URI MAY include a
    query component but MUST NOT include a fragment component.
    When applicable, the value of this parameter also typically informs the
    audience restrictions on the returned security token.
  </t>

  <t hangText="scope">
    <vspace/>
    OPTIONAL.
    A list of space-delimited, case-sensitive strings that allow the client to
    specify the desired scope of requested security token in the context of the
    service or resource where the token will be used
    (possibly indicated by the <spanx style='verb'>resource</spanx> parameter).</t>

  <t hangText="requested_security_token_type">
    <vspace/>
    OPTIONAL.
    An identifier, as described in <xref target="TokenTypeIdentifiers"/>, for the type of the requested security token.
    For example, a JWT can be requested with the identifier
    <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx>.
    If the requested type is unspecified, the returned token type is at
    the discretion of the authorization server and may be dictated by
    knowledge of the requirements of the service or resource whose location is
    indicated by the <spanx style='verb'>resource</spanx> parameter.
  </t>

  <t hangText="on_behalf_of">
    <vspace/>
    REQUIRED.
    The value of this request parameter is a security token which represents the
    identity of the party on behalf of whom the request is being made.
    Typically the subject of this token will be the primary subject of
    the security token returned in response to this request.
  </t>

  <t hangText="on_behalf_of_token_type">
    <vspace/>
    REQUIRED.
    An identifier, as described in <xref target="TokenTypeIdentifiers"/>, that indicates the type of the security token sent with
    the <spanx style="verb">on_behalf_of</spanx> parameter. For example,
    a value of <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx>,
    would indicate that the token is a JWT and a value of
    <spanx style="verb">urn:ietf:params:oauth:token-type:access_token</spanx>
    would indicate that the token is an OAuth access token.
  </t>

  <t hangText="act_as">
    <vspace/>
    OPTIONAL.
    The value of this request parameter is a security token which represents
    the identity of the party that is authorized to use the requested security token.
    When this parameter is present, it indicates that the client wants a token
    that contains claims about two distinct entities:
    1) the entity represented by the token in the <spanx style="verb">on_behalf_of</spanx>
    parameter as the primary subject and 2) the entity represented by this token as a
    party who is authorized to act on behalf of that subject.
  </t>

  <t hangText="act_as_token_type">
    <vspace/>
    REQUIRED when the <spanx style="verb">act_as</spanx> parameter is present in the
    request but MUST NOT be included otherwise. The value of this parameter is
    an identifier, as described in <xref target="TokenTypeIdentifiers"/>, that indicates the type of the security token sent with the
    <spanx style="verb">act_as</spanx> parameter.
  </t>
</list>
</t>

    </section>

    <section title="Response">
<t>
  The authorization server responds to a security token request with a normal
  OAuth 2.0 response from the token endpoint as defined in
  <xref target="RFC6749">Section 5 of RFC 6749</xref>. Additional details and
  explanation are provided in the following subsections.
</t>
      <section title="Successful Response">
<t>
  If the request is valid and meets all policy and other criteria of the authorization server,
  a successful token response is constructed by adding the following parameters
  to the entity-body of the HTTP response using the "application/json"
  media type as defined by <xref target="RFC7159"/> and an HTTP 200 status code.  The
  parameters are serialized into a JavaScript Object Notation (JSON)
  structure by adding each parameter at the top level.
  Parameter names and string values are included as JSON strings.
  Numerical values are included as JSON numbers.  The order of
  parameters does not matter and can vary.
</t>
        <t>
          <list style="hanging">

<t hangText="access_token">
  <vspace/>
  REQUIRED. The security token issued by the authorization server in response
  to the security token request.
  The <spanx style="verb">access_token</spanx> parameter from
  <xref target="RFC6749">Section 5.1 of RFC 6749</xref> is used here to carry the requested
  security token, which allows this token exchange framework to use the existing OAuth 2.0 request
  and response constructs defined for the token endpoint.
</t>

<t hangText="security_token_type">
  <vspace/>
  REQUIRED.  An identifier, as described in <xref target="TokenTypeIdentifiers"/>,
  for the general type of the returned security token.
  For example, if the security token is a JWT, this value of the
  <spanx style="verb">security_token_type</spanx> is
  <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx>.
</t>

<t hangText="token_type">
  <vspace/>
  REQUIRED.  A case insensitive value describing the type of the token issued as discussed in
  <xref target="RFC6749">Section 7.1 of RFC 6749</xref>. Note that this value is different from
  the value of the <spanx style="verb">security_token_type</spanx> and provides the client
  with information about how to utilize the token to access protected resources. For example,
  a value of <spanx style="verb">Bearer</spanx> as defined in <xref target="RFC6750"/> indicates that
  the security token is a bearer token and the client can simply present it as is without any
  additional proof of eligibility beyond the contents of the token itself.
  A value of <spanx style="verb">PoP</spanx>, on the other hand, indicates that use of
  the token will require demonstrating possession of a cryptographic key associated with the
  security token (<xref target="I-D.ietf-oauth-pop-key-distribution"/> describes the
  <spanx style="verb">PoP</spanx> token type).
</t>

<t hangText="expires_in">
  <vspace/>
  RECOMMENDED.  The validity lifetime, in seconds, of the security token issued by the
  authorization server. Oftentimes the client will not have the inclination or capability
  to inspect the content of the token and this parameter provides a consistent and token type
  agnostic indication of long the token can be expected to be valid.
  For example, the value 1800 denotes that the token will
  expire in thirty minutes from the time the response was generated.
</t>

<t hangText="scope">
  <vspace/>
  OPTIONAL, if the scope of the security token is identical to the scope requested by the client;
  otherwise, REQUIRED.
</t>

<t hangText="refresh_token">
  <vspace/>
  NOT RECOMMENDED.
  Refresh tokens will typically not be issued in response to a
  <spanx style="verb">urn:ietf:params:oauth:grant-type:security-token-request</spanx>
  grant type requests.
</t>

        </list>
        </t>
      </section>
      <section title="Error Response">
  <t>
    If either the <spanx style="verb">on_behalf_of</spanx> or <spanx style="verb">act_as</spanx>
    tokens are invalid for any reason, or are unacceptable based on policy, the authorization server
    MUST construct an error response as defined in <xref target="RFC6749">Section 5.2 of OAuth 2.0</xref>
    The value of the <spanx style='verb'>error</spanx>
    parameter MUST be the <spanx style='verb'>invalid_grant</spanx> error code. The authorization
    server MAY include additional information regarding the reasons for the error
    using the <spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.
  </t>
      </section>


    </section>
      <section anchor="TokenTypeIdentifiers" title="Token Type Identifiers">
<t>
  Several parameters in this specification utilize an identifier as the value to
  describe the type of token in question. Specifically they are the
  <spanx style="verb">requested_security_token_type</spanx>,
  <spanx style="verb">on_behalf_of_token_type</spanx>, <spanx style="verb">act_as_token_type</spanx>
  parameters of the request and the <spanx style="verb">security_token_type</spanx> member of the response.
</t>
<t>
  The values of token type identifiers are expressed as URIs with a shorthand allowed for
  commonly used types. When the value does not contain a ":" character, the value MUST
  be evaluated as though <spanx style="verb">urn:ietf:params:oauth:token-type:</spanx>
  were prepended to it. For example, the value <spanx style="verb">jwt</spanx>
  for <spanx style="verb">requested_security_token_type</spanx> is semantically equivalent
  to <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx> and the value
  <spanx style="verb">access_token</spanx> is equivalent to
  <spanx style="verb">urn:ietf:params:oauth:token-type:access_token</spanx>.
</t>
<t>
  This specification defines
  <spanx style="verb">urn:ietf:params:oauth:token-type:access_token</spanx> and
  <spanx style="verb">urn:ietf:params:oauth:token-type:refresh_token</spanx> to indicate
  an OAuth 2.0 access token and refresh token respectively.
  The value <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx> is defined in
  <xref target="RFC7519">Section 9 of RFC 7519</xref> and is used to indicate that a
  token is a JWT.
</t>
      </section>
    </section>
    <section anchor="Actor" title="Conveying Eligibility to Act As Another Party">
      <t>
	It is useful to be able to make a statement that one party is authorized
	to act on behalf of another party.
	This can be done by having the party being acted for issue
	a Security Token containing a Claim identifying the party that will
	act for it as an authorized actor.
	This statement can also optionally identify scopes in which
	the actor is eligible to act through another Claim.
	The following Claims are defined for use in JWTs for these purposes:

	<list style="hanging">
	  <t hangText="actor">
	    <vspace/>
	    Security Token that identifies a party that is asserted as being eligible
	    to act for the party identified by the JWT containing this Claim.
	  </t>
	  <t hangText="scopes">
	    <vspace/>
	    OPTIONAL.
	    Array of strings, each of which represents a service context
	    for which the actor is asserted as being eligible
	    to act for the party identified by the JWT containing this Claim.
	    The array MUST contain at least one scope value.
	    The definition of these contexts is outside the scope of this specification.
	  </t>
	</list>
      </t>
      <t>
	The JWT issued by the party being acted for MUST be signed so the identity of
	the party being acted for can be validated
	unless the identity of the party being acted for is known to
	the authorization server by other means;
	in that case, the JWT can use the <spanx style="verb">alg</spanx>
	value <spanx style="verb">none</spanx>.
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        The
        <spanx style="verb">scopes</spanx>
        and
        <spanx style="verb">actor</spanx>
        Claims are to be registered in the
        IANA "JSON Web Token Claims" registry
        established by<xref target="RFC7519">JWT</xref>.
      </t>
      <t>
        <?rfc subcompact="yes"?>
        This specification requests that IANA register the following
        values in the IANA urn:ietf:params:oauth registry established in
        <xref target="RFC6755">An IETF URN Sub-Namespace for OAuth</xref>.

        <list style="symbols">
          <t>URN: urn:ietf:params:oauth:grant-type:security-token-request</t>
          <t>Common Name: Security token request grant type for OAuth 2.0</t>
          <t>Change controller: IESG</t>
          <t>Specification Document: <xref target="Request"/> of [[ this document ]]</t>
        </list>
      </t>
      <t>
        <list style="symbols">
          <t>URN: urn:ietf:params:oauth:token-type:access_token</t>
          <t>Common Name: Token type URI for an OAuth 2.0 access token</t>
          <t>Change controller: IESG</t>
          <t>Specification Document: <xref target="TokenTypeIdentifiers"/> of [[this document]]</t>
        </list>
      </t>
      <t>
        <list style="symbols">
          <t>URN: urn:ietf:params:oauth:token-type:refresh_token</t>
          <t>Common Name:Token Type URI for an OAuth 2.0 refresh token</t>
          <t>Change controller: IESG</t>
          <t>Specification Document: <xref target="TokenTypeIdentifiers"/> of [[this document]]</t>
        </list>
        <?rfc subcompact="no"?>
      </t>
    </section>

    <section title="Security Considerations">
      <t>
        All of the normal security issues, especially in relationship
        to comparing URIs and dealing with unrecognized values, that
        are discussed in <xref target="RFC7519">JWT</xref> also apply
        here.
      </t>
      <t>
        In addition, on-behalf-of introduces its own unique security
        issues.  Any time one principal is delegated the rights of
        another principal, the potential for abuse is always a concern.
	That is why use of the <spanx style="verb">scopes</spanx>
	member is suggested.
	The scope values restrict the contexts in which
	the delegated rights can be exercised.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml' ?>
    </references>

    <references title="Informative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6755.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7521.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7523.xml' ?>
      <?rfc include="reference.I-D.ietf-oauth-pop-key-distribution"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml' ?>
      <reference anchor="WS-Trust" target="http://docs.oasis-open.org/ws-sx/ws-trust/v1.4/ws-trust.html">
        <front>
          <title>WS-Trust 1.4</title>
          <author fullname="Anthony Nadalin" initials="A." surname="Nadalin"/>
          <author fullname="Marc Goodner" initials="M." surname="Goodner"/>
          <author fullname="Martin Gudgin" initials="M." surname="Gudgin"/>
          <author fullname="Abbie Barbir" initials="A." surname="Barbir"/>
          <author fullname="Hans Granqvist" initials="H." surname="Granqvist"/>
          <date day="2" month="February" year="2012"/>
        </front>
      </reference>

    </references>

   <section title="Open Issues">
      <t>
	The following decisions need to be made and updates on this spec performed:
	<list style="symbols">
	  <t>
	    Should we say anything about proof of possession of
	    the target party's key in the On-Behalf-Of case
	    beyond specifying the use of the <spanx style="verb">actor</spanx> Claim?
	  </t>
	  <t>
	    Revise the text in the On-Behalf-Of vs. Impersonation Semantics section
	    to better align the terminology used with the semantics specified.
	  </t>
	  <t>
	    Address the sources of potential terminological confusion discussed
	    in John Bradley's review comments.
	  </t>
	  <t>
	    Add examples illustrating concrete uses of act-as and on-behalf-of.
	  </t>
	</list>
      </t>
    </section>

    <section title='Acknowledgements'>
      <t>
 [[TODO]]
      </t>
    </section>

    <section title="Document History">
      <t>
	[[ to be removed by the RFC Editor before publication as an RFC ]]
      </t>
      <t>
        -03
        <list style='symbols'>
          <t>Update document editors.</t>
          <t>update title per slide 7 of https://www.ietf.org/proceedings/93/slides/slides-93-oauth-0.pdf</t>
          <t>Elaborate some more in the abstract and introduction.</t>
          <t>
            Update the format of the request to use application/x-www-form-urlencoded request parameters and
            the response to use the existing JSON params defined in OAuth per consensus out of the meeting in
            Prague https://www.ietf.org/proceedings/93/minutes/minutes-93-oauth
          </t>
          <t>
            RFC 6755 registration requests to IANA for urn:ietf:params:oauth:token-type:refresh_token,
            urn:ietf:params:oauth:token-type:access_token and urn:ietf:params:oauth:grant-type:security-token-request
          </t>
          <t>
            Token type values can now have shorthand value of something like just jwt with
            urn:ietf:params:oauth:token-type: as implied prefix.
          </t>
          <t>Remove Implementation Considerations and requirement to support JWTs.</t>
        </list>
      </t>
      <t>
        -02
        <list style='symbols'>
	  <t>
	    Enabled use of Security Token types other than JWTs for
	    <spanx style="verb">act_as</spanx> and
	    <spanx style="verb">on_behalf_of</spanx> request values.
	  </t>
          <t>
            Referenced the JWT and OAuth Assertions RFCs.
	  </t>
        </list>
      </t>

      <t>
        -01
        <list style='symbols'>
          <t>
            Updated references.
	  </t>
        </list>
      </t>

      <t>
        -00
        <list style='symbols'>
          <t>
            Created initial working group draft from draft-jones-oauth-token-exchange-01.
	  </t>
        </list>
      </t>
    </section>     

  </back>
</rfc>
